/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am33xx-es2.dtsi"


#include "am335x-agv-common.dtsi"

/ {
	model = "TI AM335x AGV";
	compatible = "ti,am335x-agv", "ti,am33xx";
	
	gpio_helper {
		compatible = "gpio-of-helper";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&gpio_helper_pins>;

		/* declare your gpios */
		io_in0 {
			gpio-name = "io_in0";
			gpio = <&gpio1 8 GPIO_ACTIVE_LOW>;
			input;
		};
		io_in1 {
			gpio-name = "io_in1";
			gpio = <&gpio1 9 GPIO_ACTIVE_LOW>;
			input;
		};
		io_in2 {
			gpio-name = "io_in2";
			gpio = <&gpio0 12 GPIO_ACTIVE_LOW>;
			input;
		};
		io_in3 {
			gpio-name = "io_in3";
			gpio = <&gpio0 13 GPIO_ACTIVE_LOW>;
			input;
		};
		io_out0 {
			gpio-name = "io_out0";
			gpio = <&gpio3 15 GPIO_ACTIVE_LOW>;
			output;
			init-high;
		};
		io_out1 {
			gpio-name = "io_out1";
			gpio = <&gpio3 16 GPIO_ACTIVE_LOW>;
			output;
			init-high;
		};
		io_out2 {
			gpio-name = "io_out2";
			gpio = <&gpio3 17 GPIO_ACTIVE_LOW>;
			output;
			init-high;
		};
		io_out3 {
			gpio-name = "io_out3";
			gpio = <&gpio3 19 GPIO_ACTIVE_LOW>;
			output;
			init-high;
		};
	};
};

&ldo3_reg {
	regulator-min-microvolt = <1800000>;
	regulator-max-microvolt = <1800000>;
	regulator-always-on;
};

&mmc1 {
	vmmc-supply = <&vmmcsd_fixed>;
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
	status = "okay";
};

&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;
	status = "okay";
};

&uart3 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart3_pins>;
	status = "okay";
	rts-gpio = <&gpio3 18 GPIO_ACTIVE_HIGH>;
	rs485-rts-active-high;
	rs485-rts-delay = <0 0>;
	linux,rs485-enabled-at-boot-time;
};

&elm {
	status = "okay";
};

&gpmc {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&gpmc_pins>;
	ranges = <0 0 0x08000000 0x1000000>;	/* CS0: 16MB for NAND */
	nand@0,0 {
		reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
		ti,nand-ecc-opt = "bch8";
		ti,elm-id = <&elm>;
		nand-bus-width = <8>;
		gpmc,device-width = <1>;
		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-on-ns = <0>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-on-ns = <0>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,wait-on-read = "true";
		gpmc,wait-on-write = "true";
		gpmc,bus-turnaround-ns = <0>;
		gpmc,cycle2cycle-delay-ns = <0>;
		gpmc,clk-activation-ns = <0>;
		gpmc,wait-monitoring-ns = <0>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;
		/* gpmc,device-nand = "true"; */
		/* MTD partition table */
		/* All SPL-* partitions are sized to minimal length
		 * which can be independently programmable. For
		 * NAND flash this is equal to size of erase-block */
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0 {
			label = "NAND.SPL";
			reg = <0x00000000 0x000020000>;		/* offset, size */
		};
		partition@1 {
			label = "NAND.SPL.backup1";
			reg = <0x00020000 0x00020000>;
		};
		partition@2 {
			label = "NAND.SPL.backup2";
			reg = <0x00040000 0x00020000>;
		};
		partition@3 {
			label = "NAND.SPL.backup3";
			reg = <0x00060000 0x00020000>;
		};
		partition@4 {
			label = "NAND.u-boot-spl-os";
			reg = <0x00080000 0x00040000>;
		};
		partition@5 {
			label = "NAND.u-boot";
			reg = <0x000C0000 0x00100000>;
		};
		partition@6 {
			label = "NAND.u-boot-env";
			reg = <0x001C0000 0x00020000>;
		};
		partition@7 {
			label = "NAND.u-boot-env.backup1";
			reg = <0x001E0000 0x00020000>;
		};
		partition@8 {
			label = "NAND.kernel";
			reg = <0x00200000 0x00800000>;
		};
		partition@9 {
			label = "NAND.file-system";
			reg = <0x00A00000 0x0F600000>;
		};
	};
};

&am33xx_pinmux {
	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			/* uart1_txd.uart1_txd */
			AM33XX_IOPAD(0x984, PIN_OUTPUT_PULLDOWN | MUX_MODE0)
			/* uart1_rxd.uart1_rxd */
			AM33XX_IOPAD(0x980, PIN_INPUT_PULLUP | MUX_MODE0)
		>;
	};
	uart2_pins: pinmux_uart2_pins {
		pinctrl-single,pins = <
			/* spi0_d0.uart2_txd */
			AM33XX_IOPAD(0x954, PIN_OUTPUT_PULLDOWN | MUX_MODE1)
			/* spi0_clk.uart2_rxd */
			AM33XX_IOPAD(0x950, PIN_INPUT_PULLUP | MUX_MODE1)
		>;
	};
	uart3_pins: pinmux_uart3_pins {
		pinctrl-single,pins = <
			/* lcd_enbkl(eCAP0_in_PWM0_out).uart3_txd */
			AM33XX_IOPAD(0x964, PIN_OUTPUT_PULLDOWN | MUX_MODE1)
			/* spi0_cs1.uart3_rxd */
			AM33XX_IOPAD(0x960, PIN_INPUT_PULLUP | MUX_MODE1)
			/* mcasp0_aclkr GPIO3[18], OUTPUT_PULLDOWN | MODE7 --> UART3_DE */
			AM33XX_IOPAD(0x9A0, PIN_OUTPUT_PULLDOWN | MUX_MODE7)
		>;
	};
	gpmc_pins: pinmux_gpmc_pins {
		pinctrl-single,pins = <
			0x0	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad0.gpmc_ad0 */
			0x4	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad1.gpmc_ad1 */
			0x8	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad2.gpmc_ad2 */
			0xc	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad3.gpmc_ad3 */
			0x10	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad4.gpmc_ad4 */
			0x14	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad5.gpmc_ad5 */
			0x18	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad6.gpmc_ad6 */
			0x1c	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_ad7.gpmc_ad7 */
			0x70	(PIN_INPUT_PULLUP | MUX_MODE0)	/* gpmc_wait0.gpmc_wait0 */
			/* 0x74	0x37 */	/* gpmc_wpn.gpio0_30 */
			0x7c	(PIN_OUTPUT | MUX_MODE0)	/* gpmc_csn0.gpmc_csn0  */
			0x90	(PIN_OUTPUT | MUX_MODE0)	/* gpmc_advn_ale.gpmc_advn_ale */
			0x94	(PIN_OUTPUT | MUX_MODE0)	/* gpmc_oen_ren.gpmc_oen_ren */
			0x98	(PIN_OUTPUT | MUX_MODE0)	/* gpmc_wen.gpmc_wen */
			0x9c	(PIN_OUTPUT | MUX_MODE0)	/* gpmc_be0n_cle.gpmc_be0n_cle */
		>;
	};
	gpio_helper_pins: pinmux_gpio_helper_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x968, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x96C, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x978, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x97C, PIN_INPUT | MUX_MODE7)
			AM33XX_IOPAD(0x994, PIN_OUTPUT | MUX_MODE7)
			AM33XX_IOPAD(0x998, PIN_OUTPUT | MUX_MODE7)
			AM33XX_IOPAD(0x99C, PIN_OUTPUT | MUX_MODE7)
			AM33XX_IOPAD(0x9A4, PIN_OUTPUT | MUX_MODE7)
		>;
	};
};

&i2c0 {
	#address-cells = <1>;
	#size-cells = <0>;
	status = "okay";

	ads1115: ads1115@48 {
		compatible = "ti,ads1115";
		status = "okay";
		#address-cells = <1>;
		#size-cells = <0>;
		reg = <0x48>;
		channel@1 {
			reg = <0>;
			ti,gain = <2>;
			ti,datarate = <2>;		// 32 SPS
		};
	};
};
